name: Publish and Test Workflow
on:
  push:
    branches:
      - main
jobs:
  test:
    name: Testing with Postgres and SQLite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
          
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Configure Postgres
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          echo "Postgres is ready for testing"
          echo "DATABASE_URL=$DATABASE_URL" > packages/test/.env
          
      - name: Run build
        run: pnpm build
      - name: Push database schema
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pnpm db:push:pg
          pnpm db:push:sqlite

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: pnpm test
  publish:
    name: Publish to npm
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # Ensure this job only runs when the package version has changed
  
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
          
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org/'
          cache: 'pnpm'
          
      - name: Check for changes in package.json
        id: check_changes
        run: |
          VERSION_CHANGED=$(git diff HEAD^ HEAD -- 'apps/drizzle-service/package.json' | grep '"version":' || true) 
          if [ -z "$VERSION_CHANGED" ]; then
            echo "No version change detected, skipping publish."
            echo "publish=false" >> $GITHUB_ENV
          else
            echo "Version change detected, proceeding with publish."
            echo "publish=true" >> $GITHUB_ENV
          fi
      - name: Publish package
        if: env.publish == 'true'
        run: |
          echo "Publishing package..."
          pnpm install --frozen-lockfile
          pnpm build
          pnpm publish --access public
        